
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.GuildsScalarFieldEnum = {
  id: 'id',
  GuildId: 'GuildId',
  GuildName: 'GuildName',
  GuildOwner: 'GuildOwner'
};

exports.Prisma.AutoDeletesScalarFieldEnum = {
  id: 'id',
  ChannelId: 'ChannelId',
  IsActive: 'IsActive',
  Time: 'Time',
  UUID: 'UUID',
  WhitelistedMessages: 'WhitelistedMessages',
  WhitelistedRoles: 'WhitelistedRoles',
  WhitelistedUsers: 'WhitelistedUsers',
  GuildId: 'GuildId'
};

exports.Prisma.AutoPublishScalarFieldEnum = {
  id: 'id',
  Channels: 'Channels',
  GuildId: 'GuildId'
};

exports.Prisma.AutoReactsScalarFieldEnum = {
  id: 'id',
  ChannelId: 'ChannelId',
  Emoji: 'Emoji',
  GuildId: 'GuildId'
};

exports.Prisma.AutoRolesScalarFieldEnum = {
  id: 'id',
  RoleId: 'RoleId',
  GuildId: 'GuildId'
};

exports.Prisma.GuildBansScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  Time: 'Time',
  UserId: 'UserId',
  Reason: 'Reason',
  ModeratorId: 'ModeratorId',
  DmMessage: 'DmMessage',
  Banned: 'Banned',
  CreatedAt: 'CreatedAt',
  GuildId: 'GuildId'
};

exports.Prisma.ChatModerationsScalarFieldEnum = {
  id: 'id',
  LogChannelId: 'LogChannelId',
  Words: 'Words',
  WhiteListRole: 'WhiteListRole',
  WhiteListChannel: 'WhiteListChannel',
  GuildId: 'GuildId'
};

exports.Prisma.ChannelLinksScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  ChannelId: 'ChannelId',
  WebhookUrls: 'WebhookUrls',
  GuildId: 'GuildId'
};

exports.Prisma.SyncedChannelLinkMessagesScalarFieldEnum = {
  id: 'id',
  GuildId: 'GuildId',
  UserMessageId: 'UserMessageId',
  WebhookMessageId: 'WebhookMessageId',
  WebhookURL: 'WebhookURL',
  ChannelId: 'ChannelId',
  ChannelLinkId: 'ChannelLinkId'
};

exports.Prisma.DiscordAddonsScalarFieldEnum = {
  id: 'id',
  OnlyMedia: 'OnlyMedia',
  NoLinkEmbeds: 'NoLinkEmbeds',
  InvitesPaused: 'InvitesPaused',
  GuildId: 'GuildId'
};

exports.Prisma.GiveawaysScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  MessageId: 'MessageId',
  ChannelId: 'ChannelId',
  Prize: 'Prize',
  Winners: 'Winners',
  Time: 'Time',
  CreatedAt: 'CreatedAt',
  Ended: 'Ended',
  EndedAt: 'EndedAt',
  EndedBy: 'EndedBy',
  Paused: 'Paused',
  EndedMessage: 'EndedMessage',
  Rerolled: 'Rerolled',
  WinnerIds: 'WinnerIds',
  WinnerMessageTemplate: 'WinnerMessageTemplate',
  HostedBy: 'HostedBy',
  MessageTemplate: 'MessageTemplate',
  Content: 'Content',
  Entrys: 'Entrys',
  Requirements: 'Requirements',
  GuildId: 'GuildId'
};

exports.Prisma.TempVoicesScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  Name: 'Name',
  JointoCreateChannel: 'JointoCreateChannel',
  JointoCreateCategory: 'JointoCreateCategory',
  Manage: 'Manage',
  PresetLimit: 'PresetLimit',
  GuildId: 'GuildId'
};

exports.Prisma.TempVoiceChannelsScalarFieldEnum = {
  id: 'id',
  GuildId: 'GuildId',
  ChannelId: 'ChannelId',
  OwnerId: 'OwnerId',
  TempVoiceId: 'TempVoiceId'
};

exports.Prisma.GuildLeaveSetupsScalarFieldEnum = {
  id: 'id',
  MessageTemplateId: 'MessageTemplateId',
  ChannelId: 'ChannelId',
  Image: 'Image',
  GuildId: 'GuildId'
};

exports.Prisma.GuildWelcomeSetupsScalarFieldEnum = {
  id: 'id',
  MessageTemplateId: 'MessageTemplateId',
  ChannelId: 'ChannelId',
  Image: 'Image',
  GuildId: 'GuildId'
};

exports.Prisma.GuildLoggingsScalarFieldEnum = {
  id: 'id',
  AutoMod: 'AutoMod',
  Channel: 'Channel',
  Emoji: 'Emoji',
  Guild: 'Guild',
  Integration: 'Integration',
  Invite: 'Invite',
  Member: 'Member',
  Message: 'Message',
  Moderation: 'Moderation',
  Reaction: 'Reaction',
  Role: 'Role',
  SoundBoard: 'SoundBoard',
  Sticker: 'Sticker',
  Thread: 'Thread',
  Voice: 'Voice',
  Webhook: 'Webhook',
  Ban: 'Ban',
  Kick: 'Kick',
  Poll: 'Poll',
  Stage: 'Stage',
  Event: 'Event',
  GuildId: 'GuildId'
};

exports.Prisma.GuildLoggersScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  Notes: 'Notes',
  LogMessage: 'LogMessage',
  LogJSON: 'LogJSON',
  GuildId: 'GuildId'
};

exports.Prisma.MessageTemplatesScalarFieldEnum = {
  id: 'id',
  Content: 'Content',
  EmbedJSON: 'EmbedJSON',
  OtherEmbeds: 'OtherEmbeds',
  Name: 'Name',
  GuildId: 'GuildId'
};

exports.Prisma.PermissionsScalarFieldEnum = {
  id: 'id',
  GuildId: 'GuildId'
};

exports.Prisma.ReactionRolesScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  Roles: 'Roles',
  MessageId: 'MessageId',
  ChannelId: 'ChannelId',
  AddMessage: 'AddMessage',
  RemoveMessage: 'RemoveMessage',
  Emoji: 'Emoji',
  GuildId: 'GuildId'
};

exports.Prisma.SecuritysScalarFieldEnum = {
  id: 'id',
  InviteLoggingActive: 'InviteLoggingActive',
  MaxAccountAge: 'MaxAccountAge',
  GuildId: 'GuildId'
};

exports.Prisma.VerificationGatesScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  ChannelId: 'ChannelId',
  MessageId: 'MessageId',
  Action: 'Action',
  ActionType: 'ActionType',
  Roles: 'Roles',
  VerifiedUsers: 'VerifiedUsers',
  CreatedAt: 'CreatedAt',
  Active: 'Active',
  SecurityId: 'SecurityId'
};

exports.Prisma.VerificationGatesPermissionScalarFieldEnum = {
  id: 'id',
  Permission: 'Permission',
  ChannelId: 'ChannelId',
  VerificationGateId: 'VerificationGateId'
};

exports.Prisma.SpotifyNotificationsScalarFieldEnum = {
  id: 'id',
  ShowId: 'ShowId',
  ChannelId: 'ChannelId',
  Latests: 'Latests',
  MessageTemplateId: 'MessageTemplateId',
  PingRoles: 'PingRoles',
  UUID: 'UUID',
  GuildId: 'GuildId'
};

exports.Prisma.TagsScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  TagId: 'TagId',
  MessageId: 'MessageId',
  IsShlashCommand: 'IsShlashCommand',
  ShlashCommandId: 'ShlashCommandId',
  IsTextInputCommand: 'IsTextInputCommand',
  IsEnabled: 'IsEnabled',
  PermissionRoleId: 'PermissionRoleId',
  CommandDescription: 'CommandDescription',
  FilterTextFromMessages: 'FilterTextFromMessages',
  GuildId: 'GuildId'
};

exports.Prisma.TicketSetupsScalarFieldEnum = {
  id: 'id',
  CategoryId: 'CategoryId',
  Handlers: 'Handlers',
  HandlerWithShadowPing: 'HandlerWithShadowPing',
  CustomId: 'CustomId',
  TicketChannelName: 'TicketChannelName',
  ChannelType: 'ChannelType',
  MessageTempleateId: 'MessageTempleateId',
  TicketBlacklistRoles: 'TicketBlacklistRoles',
  TranscriptChannelId: 'TranscriptChannelId',
  HasModal: 'HasModal',
  UserDMWhenCloseMessageTemplateId: 'UserDMWhenCloseMessageTemplateId',
  TicketLimit: 'TicketLimit',
  WithTicketFeedback: 'WithTicketFeedback',
  TicketFeedbackChannelId: 'TicketFeedbackChannelId',
  ModalTitle: 'ModalTitle',
  TicketCreationCooldownPerUser: 'TicketCreationCooldownPerUser',
  AutoCloseAfterInactivity: 'AutoCloseAfterInactivity',
  AutoAssignHandler: 'AutoAssignHandler',
  AutoReplyMessageTemplateId: 'AutoReplyMessageTemplateId',
  RequiredRoles: 'RequiredRoles',
  OpenTicketWithCommand: 'OpenTicketWithCommand',
  SlashCommandId: 'SlashCommandId',
  TextCommandName: 'TextCommandName',
  SendTranscriptToUser: 'SendTranscriptToUser',
  GuildId: 'GuildId'
};

exports.Prisma.TicketModalDataScalarFieldEnum = {
  id: 'id',
  Name: 'Name',
  Placeholder: 'Placeholder',
  Type: 'Type',
  TicketSetupId: 'TicketSetupId'
};

exports.Prisma.TicketHandlersScalarFieldEnum = {
  id: 'id',
  DiscordRoleId: 'DiscordRoleId',
  TicketPermission: 'TicketPermission',
  AddedDiscordPermission: 'AddedDiscordPermission',
  RemovedDiscordPermission: 'RemovedDiscordPermission'
};

exports.Prisma.TicketsScalarFieldEnum = {
  id: 'id',
  TicketId: 'TicketId',
  GuildId: 'GuildId',
  ChannelId: 'ChannelId',
  ThreadId: 'ThreadId',
  IsClaimed: 'IsClaimed',
  IsArchived: 'IsArchived',
  ArchiveMessageId: 'ArchiveMessageId',
  UserWhoHasClaimedId: 'UserWhoHasClaimedId',
  IsLooked: 'IsLooked',
  TicketOwnerId: 'TicketOwnerId',
  AddedMemberIds: 'AddedMemberIds',
  Handlers: 'Handlers',
  TranscriptChannelId: 'TranscriptChannelId',
  TranscriptHTML: 'TranscriptHTML',
  TicketNotes: 'TicketNotes',
  TicketSetupId: 'TicketSetupId'
};

exports.Prisma.TicketFeedbackScalarFieldEnum = {
  id: 'id',
  TicketId: 'TicketId',
  Rating: 'Rating',
  Comment: 'Comment',
  SubmittedAt: 'SubmittedAt'
};

exports.Prisma.GuildFeatureTogglesScalarFieldEnum = {
  id: 'id',
  LevelEnabled: 'LevelEnabled',
  WecomeEnabled: 'WecomeEnabled',
  LeaveEnabled: 'LeaveEnabled',
  AutoreactEnabled: 'AutoreactEnabled',
  AutopublishEnabled: 'AutopublishEnabled',
  ConnectionsEnabled: 'ConnectionsEnabled',
  ChatfilterEnabled: 'ChatfilterEnabled',
  AutorolesEnabled: 'AutorolesEnabled',
  LoggingEnabled: 'LoggingEnabled',
  TwitchEnabled: 'TwitchEnabled',
  YoutubeEnabled: 'YoutubeEnabled',
  SpotifyEnabled: 'SpotifyEnabled',
  GuildId: 'GuildId'
};

exports.Prisma.TwitchNotificationsScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  TwitchChannelName: 'TwitchChannelName',
  ChannelId: 'ChannelId',
  Live: 'Live',
  MessageTemplateId: 'MessageTemplateId',
  PingRoles: 'PingRoles',
  GuildId: 'GuildId'
};

exports.Prisma.YoutubeNotificationsScalarFieldEnum = {
  id: 'id',
  YoutubeChannelId: 'YoutubeChannelId',
  ChannelId: 'ChannelId',
  Latest: 'Latest',
  MessageTemplateId: 'MessageTemplateId',
  PingRoles: 'PingRoles',
  UUID: 'UUID',
  GuildId: 'GuildId'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  Username: 'Username',
  UserId: 'UserId',
  Votes: 'Votes',
  GloablVotes: 'GloablVotes',
  CustomerBots: 'CustomerBots',
  BackupCount: 'BackupCount'
};

exports.Prisma.ApisScalarFieldEnum = {
  id: 'id',
  Flags: 'Flags',
  Guilds: 'Guilds',
  Key: 'Key',
  UserId: 'UserId'
};

exports.Prisma.GuildBackupsScalarFieldEnum = {
  id: 'id',
  BackupJSON: 'BackupJSON',
  CreatedAt: 'CreatedAt',
  UUID: 'UUID',
  Name: 'Name',
  GuildId: 'GuildId',
  UserId: 'UserId'
};

exports.Prisma.CustomersScalarFieldEnum = {
  id: 'id',
  ExternalUUID: 'ExternalUUID',
  RealUUID: 'RealUUID',
  Application: 'Application',
  DisplayName: 'DisplayName',
  GuildIds: 'GuildIds',
  ServerPort: 'ServerPort',
  WSAPI: 'WSAPI',
  UserId: 'UserId'
};

exports.Prisma.VanitysScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  Slug: 'Slug',
  Host: 'Host',
  GuildId: 'GuildId',
  Invite: 'Invite',
  CreatedAt: 'CreatedAt',
  UserId: 'UserId'
};

exports.Prisma.VanityEmbedsScalarFieldEnum = {
  id: 'id',
  Title: 'Title',
  Description: 'Description',
  Color: 'Color',
  ImageUrl: 'ImageUrl',
  ThumbnailUrl: 'ThumbnailUrl',
  VanityId: 'VanityId'
};

exports.Prisma.VanityEmbedAuthorsScalarFieldEnum = {
  id: 'id',
  Name: 'Name',
  URL: 'URL',
  IconURL: 'IconURL',
  VanityEmbedsId: 'VanityEmbedsId'
};

exports.Prisma.VanityAnalyticsScalarFieldEnum = {
  id: 'id',
  Click: 'Click',
  TrackInviteWithLog: 'TrackInviteWithLog',
  TrackMessageId: 'TrackMessageId',
  Update: 'Update',
  UniqueClick: 'UniqueClick',
  JoinedWithCode: 'JoinedWithCode',
  LoggedIPs: 'LoggedIPs',
  VanityId: 'VanityId'
};

exports.Prisma.AnalyticsLatest30DaysScalarFieldEnum = {
  id: 'id',
  Click: 'Click',
  UniqueClick: 'UniqueClick',
  Date: 'Date',
  JoinedWithCode: 'JoinedWithCode',
  VanityAnalyticsId: 'VanityAnalyticsId'
};

exports.Prisma.DisBotUserNotificationsScalarFieldEnum = {
  id: 'id',
  Updates: 'Updates',
  Status: 'Status',
  Announcements: 'Announcements',
  Customer: 'Customer',
  UserId: 'UserId'
};

exports.Prisma.DisBotScalarFieldEnum = {
  id: 'id',
  SpotifyToken: 'SpotifyToken',
  TwitchToken: 'TwitchToken',
  Version: 'Version',
  GetConf: 'GetConf'
};

exports.Prisma.ImageApisScalarFieldEnum = {
  id: 'id',
  UUID: 'UUID',
  ImageBase64: 'ImageBase64',
  URL: 'URL'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  Guilds: 'Guilds',
  AutoDeletes: 'AutoDeletes',
  AutoPublish: 'AutoPublish',
  AutoReacts: 'AutoReacts',
  AutoRoles: 'AutoRoles',
  GuildBans: 'GuildBans',
  ChatModerations: 'ChatModerations',
  ChannelLinks: 'ChannelLinks',
  SyncedChannelLinkMessages: 'SyncedChannelLinkMessages',
  DiscordAddons: 'DiscordAddons',
  Giveaways: 'Giveaways',
  TempVoices: 'TempVoices',
  TempVoiceChannels: 'TempVoiceChannels',
  GuildLeaveSetups: 'GuildLeaveSetups',
  GuildWelcomeSetups: 'GuildWelcomeSetups',
  GuildLoggings: 'GuildLoggings',
  GuildLoggers: 'GuildLoggers',
  MessageTemplates: 'MessageTemplates',
  Permissions: 'Permissions',
  ReactionRoles: 'ReactionRoles',
  Securitys: 'Securitys',
  VerificationGates: 'VerificationGates',
  VerificationGatesPermission: 'VerificationGatesPermission',
  SpotifyNotifications: 'SpotifyNotifications',
  Tags: 'Tags',
  TicketSetups: 'TicketSetups',
  TicketModalData: 'TicketModalData',
  TicketHandlers: 'TicketHandlers',
  Tickets: 'Tickets',
  TicketFeedback: 'TicketFeedback',
  GuildFeatureToggles: 'GuildFeatureToggles',
  TwitchNotifications: 'TwitchNotifications',
  YoutubeNotifications: 'YoutubeNotifications',
  Users: 'Users',
  Apis: 'Apis',
  GuildBackups: 'GuildBackups',
  Customers: 'Customers',
  Vanitys: 'Vanitys',
  VanityEmbeds: 'VanityEmbeds',
  VanityEmbedAuthors: 'VanityEmbedAuthors',
  VanityAnalytics: 'VanityAnalytics',
  AnalyticsLatest30Days: 'AnalyticsLatest30Days',
  DisBotUserNotifications: 'DisBotUserNotifications',
  DisBot: 'DisBot',
  ImageApis: 'ImageApis'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
